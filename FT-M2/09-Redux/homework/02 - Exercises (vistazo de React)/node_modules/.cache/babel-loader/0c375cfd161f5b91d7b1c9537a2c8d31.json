{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lucas\\\\OneDrive\\\\Escritorio\\\\Henry\\\\Students\\\\FT-M2\\\\09-Redux\\\\homework\\\\02 - Exercises (vistazo de React)\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport Counter from './components/Counter';\nimport counter from './reducers';\n\n// Esta línea instancia nuestro store central de Redux.\n// La función `createStore` recibe el reducer\n// que es responsable de la actualización del store , junto\n//con cualquier estado inicial con el que queramos que\n//empiece el store (que en este caso es ninguno).\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst store = createStore(counter);\n\n// Aquí, envolvemos nuestro componente principal React dentro de las etiquetas del Provider,\n// que vienen del paquete react-redux.\n// Esto es necesario porque el store necesita saber hacia dónde está pasando su estado. \n// El componente Provider es donde \"vive\" el store.\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 20,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"names":["React","ReactDOM","createStore","Provider","Counter","counter","jsxDEV","_jsxDEV","store","render","children","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById"],"sources":["C:/Users/lucas/OneDrive/Escritorio/Henry/Students/FT-M2/09-Redux/homework/02 - Exercises (vistazo de React)/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport Counter from './components/Counter';\r\nimport counter from './reducers';\r\n\r\n// Esta línea instancia nuestro store central de Redux.\r\n// La función `createStore` recibe el reducer\r\n// que es responsable de la actualización del store , junto\r\n//con cualquier estado inicial con el que queramos que\r\n//empiece el store (que en este caso es ninguno).\r\nconst store = createStore(counter);\r\n\r\n// Aquí, envolvemos nuestro componente principal React dentro de las etiquetas del Provider,\r\n// que vienen del paquete react-redux.\r\n// Esto es necesario porque el store necesita saber hacia dónde está pasando su estado. \r\n// El componente Provider es donde \"vive\" el store.\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Counter />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,OAAO,MAAM,YAAY;;AAEhC;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,GAAGN,WAAW,CAACG,OAAO,CAAC;;AAElC;AACA;AACA;AACA;AACAJ,QAAQ,CAACQ,MAAM,eACbF,OAAA,CAACJ,QAAQ;EAACK,KAAK,EAAEA,KAAM;EAAAE,QAAA,eACrBH,OAAA,CAACH,OAAO;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACH,CAAC,EACXC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC"},"metadata":{},"sourceType":"module"}