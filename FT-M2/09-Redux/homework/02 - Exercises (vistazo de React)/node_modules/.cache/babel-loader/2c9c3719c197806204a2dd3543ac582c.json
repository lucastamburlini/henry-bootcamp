{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lucas\\\\OneDrive\\\\Escritorio\\\\Henry\\\\Students\\\\FT-M2\\\\09-Redux\\\\homework\\\\02 - Exercises (vistazo de React)\\\\src\\\\components\\\\Counter.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { increment, decrement } from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    // Extra Credit\n    this.incrementIfOdd = () => {\n      //Implementar una función de incremento que sólo aumenta si el valor del contador es impar\n    };\n    // Extra Credit\n    this.incrementAsync = () => {\n      //  Implementar una función de incremento que aumenta después de esperar un segundo\n    };\n  }\n  render() {\n    // Completa las funciones onClick de los botones\n    // Al hacer clic en estos botones, el recuento debe disminuir o aumentar en consecuencia\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Clickeado: \", this.props.count, \" veces\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.props.increment,\n        children: \"+ Incremeta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: /* Completar */\n        this.props.decrement,\n        children: \"- Decrementa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// La función mapStateToProps especifica qué porción del árbol de estados necesita recibir este componente.\n// En este caso, dado que nuestro store de redux sólo almacena el valor del contador,\n// este componente recibe el estado completo.\n// Sin embargo, en una aplicación redux más compleja,\n// recibiría sólo las partes relevantes que necesita del objeto de estado.\nconst mapStateToProps = state => {\n  return {\n    count: state.count\n  };\n};\n\n// Se llama a la función de connect para que este componente conozca el resto de la arquitectura de redux.\n// Sin esto, este componente es sólo un componente tonto de React.\n//Pasamos todas las funciones que dependen de Redux, junto con el propio componente,\n// para que Redux se dé a conocer a este componente.\nexport default connect(mapStateToProps, {\n  increment,\n  decrement\n})(Counter);","map":{"version":3,"names":["React","Component","connect","increment","decrement","jsxDEV","_jsxDEV","Counter","constructor","args","incrementIfOdd","incrementAsync","render","children","props","count","onClick","fileName","_jsxFileName","lineNumber","columnNumber","mapStateToProps","state"],"sources":["C:/Users/lucas/OneDrive/Escritorio/Henry/Students/FT-M2/09-Redux/homework/02 - Exercises (vistazo de React)/src/components/Counter.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { increment, decrement } from \"../actions\";\r\n\r\nclass Counter extends Component {\r\n  // Extra Credit\r\n  incrementIfOdd = () => {\r\n    //Implementar una función de incremento que sólo aumenta si el valor del contador es impar\r\n  };\r\n  // Extra Credit\r\n  incrementAsync = () => {\r\n    //  Implementar una función de incremento que aumenta después de esperar un segundo\r\n  };\r\n\r\n  render() {\r\n    // Completa las funciones onClick de los botones\r\n    // Al hacer clic en estos botones, el recuento debe disminuir o aumentar en consecuencia\r\n    return (\r\n      <p>\r\n        Clickeado: {this.props.count} veces\r\n        <button\r\n          onClick={\r\n            this.props.increment\r\n          }\r\n        >\r\n          + Incremeta\r\n        </button>\r\n        <button\r\n          onClick={\r\n            /* Completar */\r\n            this.props.decrement\r\n          }\r\n        >\r\n          - Decrementa\r\n        </button>\r\n        {/* Si quieres hacer los extra credit puede descomentar las líneas de abajo */}\r\n        {/* <button onClick={this.incrementIfOdd}>\r\n                    incrementa si es impar\r\n                </button>\r\n                <button onClick={this.incrementAsync}>\r\n                    Incrementa después de un segundo\r\n                </button>  */}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\n// La función mapStateToProps especifica qué porción del árbol de estados necesita recibir este componente.\r\n// En este caso, dado que nuestro store de redux sólo almacena el valor del contador,\r\n// este componente recibe el estado completo.\r\n// Sin embargo, en una aplicación redux más compleja,\r\n// recibiría sólo las partes relevantes que necesita del objeto de estado.\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    count: state.count,\r\n  };\r\n};\r\n\r\n// Se llama a la función de connect para que este componente conozca el resto de la arquitectura de redux.\r\n// Sin esto, este componente es sólo un componente tonto de React.\r\n//Pasamos todas las funciones que dependen de Redux, junto con el propio componente,\r\n// para que Redux se dé a conocer a este componente.\r\nexport default connect(mapStateToProps, { increment, decrement })(Counter);\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,SAAS,EAAEC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,OAAO,SAASN,SAAS,CAAC;EAAAO,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAC9B;IAAA,KACAC,cAAc,GAAG,MAAM;MACrB;IAAA,CACD;IACD;IAAA,KACAC,cAAc,GAAG,MAAM;MACrB;IAAA,CACD;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACP;IACA;IACA,oBACEN,OAAA;MAAAO,QAAA,GAAG,aACU,EAAC,IAAI,CAACC,KAAK,CAACC,KAAK,EAAC,QAC7B,eAAAT,OAAA;QACEU,OAAO,EACL,IAAI,CAACF,KAAK,CAACX,SACZ;QAAAU,QAAA,EACF;MAED;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTd,OAAA;QACEU,OAAO,EACL;QACA,IAAI,CAACF,KAAK,CAACV,SACZ;QAAAS,QAAA,EACF;MAED;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQR,CAAC;EAER;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAIC,KAAK,IAAK;EACjC,OAAO;IACLP,KAAK,EAAEO,KAAK,CAACP;EACf,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA,eAAeb,OAAO,CAACmB,eAAe,EAAE;EAAElB,SAAS;EAAEC;AAAU,CAAC,CAAC,CAACG,OAAO,CAAC"},"metadata":{},"sourceType":"module"}